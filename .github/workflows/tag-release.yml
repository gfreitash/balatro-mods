name: Tag Release on Push to Main

on:
  push:
    branches: [main]

jobs:
  tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create and push tags
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history to diff against the 'before' commit
          fetch-depth: 0

      - name: Detect Changed Mods to Tag
        id: mods_to_tag
        run: |
          echo "üîç Analyzing commits from ${{ github.event.before }} to ${{ github.event.after }}..."
          declare -A mods_to_tag_map

          # Get all files changed in the push
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          if [ -z "$CHANGED_FILES" ]; then
            echo "No file changes detected in this push. Nothing to tag."
            echo "mods_json={}" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Changed files in this push:"
          echo "$CHANGED_FILES"
          echo "---"

          # Find all potential mod directories (containing a manifest.json)
          for manifest_path in $(find . -maxdepth 2 -name "manifest.json" ! -path "./_common/*" ! -path "./lib/*"); do
            mod_dir=$(dirname "$manifest_path")
            mod_name=$(basename "$mod_dir")

            # Check if any changed file belongs to this mod directory
            if echo "$CHANGED_FILES" | grep -q -E "^${mod_name}/"; then
              version=$(jq -r '.version' "$manifest_path")
              if [ -z "$version" ] || [ "$version" == "null" ]; then
                echo "‚ö†Ô∏è Could not read version for ${mod_name}. Skipping."
                continue
              fi
              echo "‚úÖ Found changed mod: ${mod_name}. Version to tag: ${version}"
              mods_to_tag_map[$mod_name]=$version
            fi
          done

          if [ ${#mods_to_tag_map[@]} -eq 0 ]; then
            echo "‚ÑπÔ∏è No changes found within any mod directories."
          fi

          # Convert the bash map to a JSON object for the output
          json_output=$(jq -n 'reduce inputs as $i ({}; . + $i)' <(
            if [ ${#mods_to_tag_map[@]} -eq 0 ]; then
              echo "{}"
            else
              for mod in "${!mods_to_tag_map[@]}"; do
                echo "{\"$mod\": \"${mods_to_tag_map[$mod]}\"}"
              done
            fi
          ))
          echo "mods_json=$(echo $json_output | jq -c .)" >> $GITHUB_OUTPUT
          echo "---"
          echo "Final JSON for tagging job: $(echo $json_output | jq -c .)"

      - name: Create and Push Git Tags
        if: steps.mods_to_tag.outputs.mods_json != '{}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODS_JSON: ${{ steps.mods_to_tag.outputs.mods_json }}
        run: |
          echo "Mods to process for tagging: $MODS_JSON"
          tags_created=false

          for mod_name in $(echo "$MODS_JSON" | jq -r 'keys[]'); do
            version=$(echo "$MODS_JSON" | jq -r ".[\"${mod_name}\"]")
            tag_name="${mod_name}__v${version}"

            echo "---"
            echo "Processing: ${mod_name} v${version} (Tag: ${tag_name})"

            if gh release view "$tag_name" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
              echo "‚ÑπÔ∏è Release for tag ${tag_name} already exists. Skipping tag creation."
            else
              echo "‚úÖ Release for ${tag_name} not found. Creating tag on commit ${{ github.sha }}..."
              git tag "$tag_name" "${{ github.sha }}"
              tags_created=true
            fi
          done

          if [ "$tags_created" = true ]; then
            echo "---"
            echo "üì§ Pushing new tags to origin..."
            git push origin --tags
          else
            echo "---"
            echo "‚úÖ No new tags were created in this run."
          fi