name: Tag Release on Push to Main

on:
  push:
    branches: [main]

jobs:
  tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create and push tags
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history and tags for version comparison
          fetch-depth: 0

      - name: Detect Changed Mods to Tag
        id: mods_to_tag
        run: |
          echo "üîç Analyzing commits from ${{ github.event.before }} to ${{ github.event.after }}..."
          declare -A mods_to_tag_map

          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          if [ -z "$CHANGED_FILES" ]; then
            echo "No file changes detected in this push. Nothing to tag."
            echo "mods_json={}" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Changed files in this push:"
          echo "$CHANGED_FILES"
          echo "---"

          for manifest_path in $(find . -maxdepth 2 -name "manifest.json" ! -path "./_common/*" ! -path "./lib/*"); do
            mod_dir=$(dirname "$manifest_path")
            mod_name=$(basename "$mod_dir")

            if echo "$CHANGED_FILES" | grep -q -E "^${mod_name}/"; then
              version=$(jq -r '.version' "$manifest_path")
              if [ -z "$version" ] || [ "$version" == "null" ]; then
                echo "‚ö†Ô∏è Could not read version for ${mod_name}. Skipping."
                continue
              fi
              echo "‚úÖ Found changed mod: ${mod_name}. Version to tag: ${version}"
              mods_to_tag_map[$mod_name]=$version
            fi
          done

          if [ ${#mods_to_tag_map[@]} -eq 0 ]; then
            echo "‚ÑπÔ∏è No changes found within any mod directories."
          fi

          json_output=$(jq -n 'reduce inputs as $i ({}; . + $i)' <(
            if [ ${#mods_to_tag_map[@]} -eq 0 ]; then
              echo "{}"
            else
              for mod in "${!mods_to_tag_map[@]}"; do
                echo "{\"$mod\": \"${mods_to_tag_map[$mod]}\"}"
              done
            fi
          ))
          echo "mods_json=$(echo $json_output | jq -c .)" >> $GITHUB_OUTPUT
          echo "---"
          echo "Final JSON for tagging job: $(echo $json_output | jq -c .)"

      - name: Create Tags, Push, and Dispatch Release Workflow
        if: steps.mods_to_tag.outputs.mods_json != '{}'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          MODS_JSON: ${{ steps.mods_to_tag.outputs.mods_json }}
        run: |
          echo "Mods to process: $MODS_JSON"
          tags_pushed=false
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

          for mod_name in $(echo "$MODS_JSON" | jq -r 'keys[]'); do
            version=$(echo "$MODS_JSON" | jq -r ".[\"${mod_name}\"]")
            tag_name="${mod_name}__v${version}"
            echo "---"
            echo "Processing: ${mod_name} v${version} (Tag: ${tag_name})"
            if gh release view "$tag_name" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
              echo "‚ÑπÔ∏è Release for tag ${tag_name} already exists. Skipping tag creation."
            else
              echo "‚úÖ Creating local tag ${tag_name} on commit ${{ github.sha }}..."
              git tag "$tag_name" "${{ github.sha }}"
              tags_pushed=true
            fi
          done

          if [ "$tags_pushed" = true ]; then
            echo "---"
            echo "üì§ Pushing new tags to origin..."
            git push origin --tags
          else
            echo "---"
            echo "‚úÖ No new tags were created. Nothing to push."
          fi

          echo "---"
          echo "üöÄ Dispatching release workflows..."
          for mod_name in $(echo "$MODS_JSON" | jq -r 'keys[]'); do
            version=$(echo "$MODS_JSON" | jq -r ".[\"${mod_name}\"]")
            tag_name="${mod_name}__v${version}"
            echo "Dispatching for ${tag_name}..."
            gh workflow run release-mod.yml \
              --repo "$GITHUB_REPOSITORY" \
              --ref main \
              -f mod_name="$mod_name" \
              -f version="$version" \
              -f tag_name="$tag_name"
          done

          echo "‚úÖ All workflows dispatched."

      - name: Check for Missed Releases (Catch-up)
        if: steps.mods_to_tag.outputs.mods_json == '{}'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "‚ÑπÔ∏è No new mod changes detected. Running catch-up check for missed releases..."
          git fetch --tags

          for manifest_path in $(find . -maxdepth 2 -name "manifest.json" ! -path "./_common/*" ! -path "./lib/*"); do
            mod_name=$(basename "$(dirname "$manifest_path")")
            echo "---"
            echo "üîç Checking mod: ${mod_name}"

            # Find the latest version tag for this mod using version-aware sorting
            latest_tag=$(git tag --list "${mod_name}__v*" | sort -V | tail -n 1)

            if [ -z "$latest_tag" ]; then
              echo "  -> No tags found for this mod. Skipping."
              continue
            fi

            echo "  -> Latest tag found: ${latest_tag}"

            # Check if a release exists for this tag. If the command fails, no release exists.
            if ! gh release view "$latest_tag" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
              echo "  -> üö® Release for ${latest_tag} is MISSING! Dispatching release workflow..."
              version="${latest_tag#*__v}"

              gh workflow run release-mod.yml \
                --repo "$GITHUB_REPOSITORY" \
                --ref main \
                -f mod_name="$mod_name" \
                -f version="$version" \
                -f tag_name="$latest_tag"
            else
              echo "  -> ‚úÖ Release for ${latest_tag} already exists."
            fi
          done

          echo "---"
          echo "‚úÖ Catch-up check complete."