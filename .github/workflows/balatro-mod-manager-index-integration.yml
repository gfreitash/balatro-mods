name: Update Balatro Mod Index

on:
  workflow_dispatch:
    inputs:
      mod_name: # This will be treated as the directory name
        description: "Mod directory name to update (e.g., black-seal)"
        required: true
        type: string
      force_update:
        description: "Force update even if no changes detected"
        required: false
        type: boolean
        default: false

  # Auto-trigger when index files change
  push:
    paths:
      - "*/index.meta.json"
      - "*/index.description.md"
      - "*/index.thumbnail.jpg"
    branches:
      - main

  # Auto-trigger after Release Mod workflow completes successfully
  workflow_run:
    workflows: ["Release Mod"]
    types:
      - completed
    branches:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      mods_json: ${{ steps.changes.outputs.mods_json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # For push trigger diff

      - name: Detect changed mods and their titles
        id: changes
        run: |
          echo "üîç Detecting changed mods and their titles..."
          mods_data_json="[]" # Initialize as empty JSON array

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            dir_name="${{ github.event.inputs.mod_name }}"
            echo "üéØ Manual trigger detected for mod directory: $dir_name"
            meta_file_path="${dir_name}/index.meta.json" # This is index.meta.json in the current repo
            title_name="$dir_name" # Default title to dir_name
            if [ -f "$meta_file_path" ]; then
              title_from_file=$(jq -r '.title' "$meta_file_path" 2>/dev/null)
              if [ -n "$title_from_file" ] && [ "$title_from_file" != "null" ]; then
                title_name="$title_from_file"
              else
                echo "‚ö†Ô∏è Could not read .title from $meta_file_path, using directory name '$dir_name' as title."
              fi
            else
              echo "‚ö†Ô∏è $meta_file_path not found, using directory name '$dir_name' as title."
            fi
            mods_data_json=$(echo "$mods_data_json" | jq --arg dir "$dir_name" --arg title "$title_name" '. + [{dirName: $dir, titleName: $title}]')

          elif [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "üöÄ Triggered by Release Mod workflow completion"
            if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
              echo "‚ö†Ô∏è Release Mod workflow did not complete successfully, skipping."
            else
              RELEASE_TAG="${{ github.event.workflow_run.head_branch }}"
              echo "üè∑Ô∏è Release workflow was triggered by tag: $RELEASE_TAG"
              if [[ "$RELEASE_TAG" =~ ^(.*)__v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                dir_name="${BASH_REMATCH[1]}"
                echo "üì¶ Extracted mod directory from release tag: $dir_name"
                meta_file_path="${dir_name}/index.meta.json" # This is index.meta.json in the current repo
                title_name="$dir_name"
                if [ -f "$meta_file_path" ]; then
                  title_from_file=$(jq -r '.title' "$meta_file_path" 2>/dev/null)
                  if [ -n "$title_from_file" ] && [ "$title_from_file" != "null" ]; then
                    title_name="$title_from_file"
                  else
                    echo "‚ö†Ô∏è Could not read .title from $meta_file_path, using directory name '$dir_name' as title."
                  fi
                else
                  echo "‚ö†Ô∏è $meta_file_path not found, using directory name '$dir_name' as title."
                fi
                mods_data_json=$(echo "$mods_data_json" | jq --arg dir "$dir_name" --arg title "$title_name" '. + [{dirName: $dir, titleName: $title}]')
              else
                echo "‚ÑπÔ∏è Release tag '$RELEASE_TAG' did not match expected format (modDirName__vX.Y.Z). Skipping mod detection for this workflow_run event."
              fi
            fi
          else # push trigger
            echo "ü§ñ Auto-trigger: analyzing changed files..."
            changed_files=$(git diff --name-only HEAD~1 HEAD)
            declare -A unique_mod_dirs

            for file in $changed_files; do
              if [[ $file =~ ^([^/]+)/index\.(meta\.json|description\.md|thumbnail\.jpg)$ ]]; then
                dir_name="${BASH_REMATCH[1]}"
                if [[ -z "${unique_mod_dirs[$dir_name]}" ]]; then
                  meta_file_path="${dir_name}/index.meta.json" # This is index.meta.json in the current repo
                  title_name="$dir_name"
                  if [ -f "$meta_file_path" ]; then
                    title_from_file=$(jq -r '.title' "$meta_file_path" 2>/dev/null)
                    if [ -n "$title_from_file" ] && [ "$title_from_file" != "null" ]; then
                      title_name="$title_from_file"
                    else
                      echo "‚ö†Ô∏è Could not read .title from $meta_file_path for dir $dir_name. Using directory name as title."
                    fi
                  else
                    echo "‚ö†Ô∏è $meta_file_path not found for dir $dir_name. Using directory name as title."
                  fi
                  unique_mod_dirs["$dir_name"]="$title_name"
                  echo "üì¶ Found changes in mod directory: $dir_name (Title: $title_name)"
                fi
              fi
            done

            for dir in "${!unique_mod_dirs[@]}"; do
              title="${unique_mod_dirs[$dir]}"
              mods_data_json=$(echo "$mods_data_json" | jq --arg d "$dir" --arg t "$title" '. + [{dirName: $d, titleName: $t}]')
            done
          fi

          compact_mods_data_json=$(echo "$mods_data_json" | jq -c '.')
          {
            echo "mods_json<<EOF"
            echo "$compact_mods_data_json"
            echo "EOF"
          } >> $GITHUB_OUTPUT

          echo "‚úÖ Detection complete. Output for GITHUB_OUTPUT: $compact_mods_data_json"
          echo "Full (potentially pretty-printed) mods_data_json for debugging:"
          echo "$mods_data_json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-index:
    needs: detect-changes
    if: needs.detect-changes.outputs.mods_json != '[]'
    runs-on: ubuntu-latest
    env:
      TARGET_REPO: "skyline69/balatro-mod-index"
      TARGET_BRANCH: "main"
      FORK_OWNER: "gfreitash"
      AUTHOR: "riosodu"
    strategy:
      matrix:
        mod: ${{ fromJson(needs.detect-changes.outputs.mods_json) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # This checks out gfreitash/balatro-mods

      - name: Verify mod and index files
        run: |
          MOD_DIR_NAME="${{ matrix.mod.dirName }}"
          echo "üîç Verifying mod structure for directory: $MOD_DIR_NAME (Title: ${{ matrix.mod.titleName }})"
          if [ ! -d "$MOD_DIR_NAME" ]; then
            echo "‚ùå Error: Mod folder '$MOD_DIR_NAME' does not exist in ${{ github.repository }}"
            exit 1
          fi
          if [ ! -f "$MOD_DIR_NAME/index.meta.json" ]; then
            echo "‚ùå Error: index.meta.json not found in $MOD_DIR_NAME in ${{ github.repository }}"
            exit 1
          fi
          if [ ! -f "$MOD_DIR_NAME/index.description.md" ]; then
            echo "‚ùå Error: index.description.md not found in $MOD_DIR_NAME in ${{ github.repository }}"
            exit 1
          fi
          # Check for manifest.json for the description part
          if [ ! -f "$MOD_DIR_NAME/manifest.json" ]; then
            echo "‚ö†Ô∏è Warning: manifest.json not found in $MOD_DIR_NAME in ${{ github.repository }}. PR description will indicate this."
          fi
          echo "‚úÖ All required files found for $MOD_DIR_NAME"

      - name: Get latest version for mod
        id: version
        run: |
          MOD_DIR_NAME="${{ matrix.mod.dirName }}"
          echo "üîç Getting latest version for: $MOD_DIR_NAME"
          LATEST_TAG="${MOD_DIR_NAME}__latest"

          LATEST_VERSION=$(gh release view "$LATEST_TAG" --repo ${{ github.repository }} --json body --jq '.body' | \
            grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1 | sed 's/^v//')

          if [ -z "$LATEST_VERSION" ]; then
            echo "‚ö†Ô∏è Warning: No latest release found for $MOD_DIR_NAME (tag $LATEST_TAG), using 0.0.0"
            LATEST_VERSION="0.0.0"
          fi

          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "üìã Latest version for $MOD_DIR_NAME: $LATEST_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if mod exists in index
        id: check_exists
        run: |
          MOD_DIR_NAME="${{ matrix.mod.dirName }}"
          echo "üîç Checking if mod ${{ env.AUTHOR }}@$MOD_DIR_NAME exists in index..."
          echo "üì• Cloning target repository to check existing mods..."
          gh repo clone "${{ env.TARGET_REPO }}" temp-index || exit 1

          if [ -d "temp-index/mods/${{ env.AUTHOR }}@${MOD_DIR_NAME}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Mod ${{ env.AUTHOR }}@${MOD_DIR_NAME} already exists in index"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "üÜï Mod ${{ env.AUTHOR }}@${MOD_DIR_NAME} is new to index"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for changes that matter
        id: check_changes
        run: |
          MOD_DIR_NAME="${{ matrix.mod.dirName }}"
          echo "üîç Analyzing changes for $MOD_DIR_NAME to determine if PR is needed..."
          VERSION="${{ steps.version.outputs.version }}"

          mkdir -p "temp-current/${{ env.AUTHOR }}@${MOD_DIR_NAME}"

          # This index.meta.json is from the current repo (gfreitash/balatro-mods)
          jq --arg url "https://github.com/${{ github.repository }}/releases/download/${MOD_DIR_NAME}__latest/${MOD_DIR_NAME}.zip" \
             --arg folder "$MOD_DIR_NAME" \
             --arg version "$VERSION" \
             '. + {downloadURL: $url, folderName: $folder, version: $version}' \
             "$MOD_DIR_NAME/index.meta.json" > "temp-current/${{ env.AUTHOR }}@${MOD_DIR_NAME}/meta.json"

          cp "$MOD_DIR_NAME/index.description.md" "temp-current/${{ env.AUTHOR }}@${MOD_DIR_NAME}/description.md"

          if [ -f "$MOD_DIR_NAME/index.thumbnail.jpg" ]; then
            cp "$MOD_DIR_NAME/index.thumbnail.jpg" "temp-current/${{ env.AUTHOR }}@${MOD_DIR_NAME}/thumbnail.jpg"
          fi

          if [ "${{ steps.check_exists.outputs.exists }}" = "true" ]; then
            echo "üìä Comparing with existing mod in index..."
            VERSION_ONLY_CHANGE=true

            if ! jq 'del(.version)' "temp-current/${{ env.AUTHOR }}@${MOD_DIR_NAME}/meta.json" | \
                 diff -q - <(jq 'del(.version)' "temp-index/mods/${{ env.AUTHOR }}@${MOD_DIR_NAME}/meta.json" 2>/dev/null || echo "{}") >/dev/null 2>&1; then
              echo "üìù Meta.json has non-version changes"
              VERSION_ONLY_CHANGE=false
            fi

            if ! diff -q "$MOD_DIR_NAME/index.description.md" "temp-index/mods/${{ env.AUTHOR }}@${MOD_DIR_NAME}/description.md" >/dev/null 2>&1; then
              echo "üìù Description has changes"
              VERSION_ONLY_CHANGE=false
            fi

            if [ -f "$MOD_DIR_NAME/index.thumbnail.jpg" ] && [ -f "temp-index/mods/${{ env.AUTHOR }}@${MOD_DIR_NAME}/thumbnail.jpg" ]; then
              if ! diff -q "$MOD_DIR_NAME/index.thumbnail.jpg" "temp-index/mods/${{ env.AUTHOR }}@${MOD_DIR_NAME}/thumbnail.jpg" >/dev/null 2>&1; then
                echo "üñºÔ∏è Thumbnail has changes"
                VERSION_ONLY_CHANGE=false
              fi
            elif [ -f "$MOD_DIR_NAME/index.thumbnail.jpg" ] && [ ! -f "temp-index/mods/${{ env.AUTHOR }}@${MOD_DIR_NAME}/thumbnail.jpg" ]; then
              echo "üñºÔ∏è New thumbnail added"
              VERSION_ONLY_CHANGE=false
            elif [ ! -f "$MOD_DIR_NAME/index.thumbnail.jpg" ] && [ -f "temp-index/mods/${{ env.AUTHOR }}@${MOD_DIR_NAME}/thumbnail.jpg" ]; then
              echo "üñºÔ∏è Thumbnail removed"
              VERSION_ONLY_CHANGE=false
            fi

            if [ "$VERSION_ONLY_CHANGE" = "true" ]; then
              echo "‚ÑπÔ∏è Only version changed for $MOD_DIR_NAME - mod index will auto-update via automatic-version-check"
              echo "version_only_change=true" >> $GITHUB_OUTPUT
            else
              echo "üìù Meaningful changes detected for $MOD_DIR_NAME beyond version"
              echo "version_only_change=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "üÜï New mod ($MOD_DIR_NAME) - will create PR"
            echo "version_only_change=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare submission files
        run: |
          MOD_DIR_NAME="${{ matrix.mod.dirName }}"
          echo "üìÅ Preparing submission files for $MOD_DIR_NAME..."
          VERSION="${{ steps.version.outputs.version }}"

          mkdir -p "submission/${{ env.AUTHOR }}@${MOD_DIR_NAME}"

          # This index.meta.json is from the current repo (gfreitash/balatro-mods)
          jq --arg url "https://github.com/${{ github.repository }}/releases/download/${MOD_DIR_NAME}__latest/${MOD_DIR_NAME}.zip" \
             --arg folder "$MOD_DIR_NAME" \
             --arg version "$VERSION" \
             '. + {downloadURL: $url, folderName: $folder, version: $version}' \
             "$MOD_DIR_NAME/index.meta.json" > "submission/${{ env.AUTHOR }}@${MOD_DIR_NAME}/meta.json"

          cp "$MOD_DIR_NAME/index.description.md" "submission/${{ env.AUTHOR }}@${MOD_DIR_NAME}/description.md"

          if [ -f "$MOD_DIR_NAME/index.thumbnail.jpg" ]; then
            echo "üñºÔ∏è Copying thumbnail image for $MOD_DIR_NAME..."
            cp "$MOD_DIR_NAME/index.thumbnail.jpg" "submission/${{ env.AUTHOR }}@${MOD_DIR_NAME}/thumbnail.jpg"
          else
            echo "‚ÑπÔ∏è No thumbnail found for $MOD_DIR_NAME, skipping..."
          fi
          echo "‚úÖ Submission files prepared successfully for $MOD_DIR_NAME"

      - name: Fork and submit to Balatro Mod Index
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          MOD_DIR_NAME: ${{ matrix.mod.dirName }}
          MOD_TITLE_NAME: ${{ matrix.mod.titleName }}
          IS_UPDATE: ${{ steps.check_exists.outputs.exists }}
          FORCE_UPDATE: ${{ github.event.inputs.force_update }}
          VERSION_ONLY_CHANGE: ${{ steps.check_changes.outputs.version_only_change }}
        run: |
          CURRENT_MOD_DIR="${{ env.MOD_DIR_NAME }}"
          CURRENT_MOD_TITLE="${{ env.MOD_TITLE_NAME }}" # Title from index.meta.json

          # Attempt to read description from the mod's manifest.json in the source repo (gfreitash/balatro-mods)
          # The workflow is running in a checkout of gfreitash/balatro-mods
          MANIFEST_PATH="${CURRENT_MOD_DIR}/manifest.json"
          MOD_MANIFEST_DESCRIPTION_LINE=""

          if [ -f "$MANIFEST_PATH" ]; then
            DESCRIPTION_FROM_MANIFEST=$(jq -r '.description' "$MANIFEST_PATH" 2>/dev/null)
            if [ -n "$DESCRIPTION_FROM_MANIFEST" ] && [ "$DESCRIPTION_FROM_MANIFEST" != "null" ]; then
              # Basic handling for multiline in PR body - ensure it's treated as a single paragraph or handle newlines carefully
              # For simplicity, we'll let it flow as is. GitHub Markdown handles newlines in variables well within multiline strings.
              MOD_MANIFEST_DESCRIPTION_LINE="**Description (from mod's manifest.json):** $DESCRIPTION_FROM_MANIFEST"
            else
              MOD_MANIFEST_DESCRIPTION_LINE="**Description (from mod's manifest.json):** Not available or empty in ${MANIFEST_PATH}."
            fi
          else
            MOD_MANIFEST_DESCRIPTION_LINE="**Description (from mod's manifest.json):** ${MANIFEST_PATH} not found in source repository."
          fi

          if [ "$VERSION_ONLY_CHANGE" = "true" ] && [ "$FORCE_UPDATE" != "true" ]; then
            echo "‚ÑπÔ∏è Skipping PR for $CURRENT_MOD_DIR - only version changed and automatic-version-check handles this"
            echo "## ‚ÑπÔ∏è PR Skipped - Auto-Update" >> $GITHUB_STEP_SUMMARY
            echo "**Mod Directory:** $CURRENT_MOD_DIR (Title: $CURRENT_MOD_TITLE)" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** Only version changed - handled automatically by mod index" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          echo "üöÄ Starting fork and submission process for $CURRENT_MOD_DIR..."
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global url."https://$GITHUB_TOKEN@github.com/".insteadOf "https://github.com/"

          TARGET_REPO_NAME=$(echo "${{ env.TARGET_REPO }}" | cut -d'/' -f2)

          echo "üç¥ Forking ${{ env.TARGET_REPO }} to ${{ env.FORK_OWNER }}/$TARGET_REPO_NAME"
          if gh repo view "${{ env.FORK_OWNER }}/$TARGET_REPO_NAME" >/dev/null 2>&1; then
            echo "‚úÖ Fork already exists"
          else
            echo "üîÑ Creating fork..."
            gh repo fork "${{ env.TARGET_REPO }}" --clone=false
            echo "‚è≥ Waiting for fork..." && sleep 10
          fi

          echo "üì• Cloning fork..."
          gh repo clone "${{ env.FORK_OWNER }}/$TARGET_REPO_NAME" mod-index-fork
          cd mod-index-fork

          echo "üîÑ Setting up upstream remote..."
          git remote add upstream "https://github.com/${{ env.TARGET_REPO }}.git" 2>/dev/null || true
          git fetch upstream

          echo "üîÑ Syncing with upstream..."
          git checkout ${{ env.TARGET_BRANCH }} 2>/dev/null || git checkout -b ${{ env.TARGET_BRANCH }} upstream/${{ env.TARGET_BRANCH }}
          git reset --hard upstream/${{ env.TARGET_BRANCH }}
          git remote set-url origin "https://$GITHUB_TOKEN@github.com/${{ env.FORK_OWNER }}/$TARGET_REPO_NAME.git"
          echo "üì§ Syncing fork with upstream..."
          git push origin ${{ env.TARGET_BRANCH }} --force-with-lease

          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PR_MOD_IDENTIFIER="${{ env.AUTHOR }}@${CURRENT_MOD_DIR}"

          if [ "$IS_UPDATE" = "true" ]; then
            BRANCH_NAME="update-${CURRENT_MOD_DIR}-${TIMESTAMP}"
            PR_TITLE="Update ${PR_MOD_IDENTIFIER} mod"
            PR_BODY="Automated update of the mod '$CURRENT_MOD_TITLE' (directory: $CURRENT_MOD_DIR)

          **Mod:** \`${PR_MOD_IDENTIFIER}\`
          ${MOD_MANIFEST_DESCRIPTION_LINE}

          **Source Files (in ${GITHUB_REPOSITORY}):** ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/tree/main/${CURRENT_MOD_DIR}
          **Triggering Commit (in ${GITHUB_REPOSITORY}):** [${GITHUB_SHA:0:7}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA})

          ---
          **Note:** This PR was created automatically. Review comments and feedback are welcome."
            echo "üîÑ Preparing update for existing mod $CURRENT_MOD_DIR..."
          else
            BRANCH_NAME="add-${CURRENT_MOD_DIR}-${TIMESTAMP}"
            PR_TITLE="Add ${PR_MOD_IDENTIFIER} mod"
            PR_BODY="New mod submission: '$CURRENT_MOD_TITLE' (directory: $CURRENT_MOD_DIR)

          **Mod Details:**
          - Author: ${{ env.AUTHOR }}
          - Name: $CURRENT_MOD_TITLE (Directory: $CURRENT_MOD_DIR)

          **Mod:** \`${PR_MOD_IDENTIFIER}\`
          ${MOD_MANIFEST_DESCRIPTION_LINE}

          **Source Files (in ${GITHUB_REPOSITORY}):** ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/tree/main/${CURRENT_MOD_DIR}
          **Triggering Commit (in ${GITHUB_REPOSITORY}):** [${GITHUB_SHA:0:7}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA})

          ---
          **Note:** This PR was created automatically. Review comments and feedback are welcome."
            echo "üÜï Preparing submission for new mod $CURRENT_MOD_DIR..."
          fi

          echo "üåø Creating branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"

          echo "üìÅ Copying submission files..."
          mkdir -p mods
          cp -r ../submission/* mods/ # Copies from the 'submission' directory prepared in a previous step

          echo "üìã Files in submission:" && find mods -type f | head -20

          echo "üîç Checking for existing open PRs for $PR_MOD_IDENTIFIER..."
          export TEMP_GITHUB_TOKEN="$GITHUB_TOKEN"
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}" # Use default GITHUB_TOKEN for PR listing

          EXISTING_PRS=$(gh pr list \
            --repo "${{ env.TARGET_REPO }}" \
            --state open \
            --search "in:title ${PR_MOD_IDENTIFIER}" \
            --json number,title \
            --jq '.[] | select(.title | contains("'${PR_MOD_IDENTIFIER}'"))')

          export GITHUB_TOKEN="$TEMP_GITHUB_TOKEN" # Revert to PAT_TOKEN for push/PR creation

          if [ -n "$EXISTING_PRS" ] && [ "$FORCE_UPDATE" != "true" ]; then
            echo "‚ö†Ô∏è Found existing open PR(s) for $PR_MOD_IDENTIFIER:"
            echo "$EXISTING_PRS" | jq -r '"- #\(.number): \(.title)"'
            echo "üö´ Skipping PR creation."
            echo "## ‚ö†Ô∏è PR Skipped - Existing PR" >> $GITHUB_STEP_SUMMARY
            echo "**Mod Directory:** $CURRENT_MOD_DIR (Title: $CURRENT_MOD_TITLE)" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** Existing open PR found for \`${PR_MOD_IDENTIFIER}\`" >> $GITHUB_STEP_SUMMARY
            echo "$EXISTING_PRS" | jq -r '"- #\(.number): \(.title)"' >> $GITHUB_STEP_SUMMARY
            exit 0
          elif [ -n "$EXISTING_PRS" ] && [ "$FORCE_UPDATE" = "true" ]; then
            echo "üîß Found existing open PR(s) but force update is enabled. Proceeding..."
          fi

          git add .
          if git diff --cached --quiet; then
            if [ "$FORCE_UPDATE" != "true" ]; then
              echo "‚ÑπÔ∏è No changes detected for $CURRENT_MOD_DIR, skipping PR creation"
              exit 0
            else
              echo "üîß Force update requested for $CURRENT_MOD_DIR, creating empty commit"
              git commit --allow-empty -m "$PR_TITLE (forced update)"
            fi
          else
            echo "üíæ Committing changes for $CURRENT_MOD_DIR..."
            git commit -m "$PR_TITLE"
          fi

          echo "üì§ Pushing to origin/$BRANCH_NAME"
          git push origin "$BRANCH_NAME"

          echo "üéØ Creating PR to ${{ env.TARGET_REPO }}"
          PR_URL=$(gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base ${{ env.TARGET_BRANCH }} \
            --head "${{ env.FORK_OWNER }}:$BRANCH_NAME" \
            --repo "${{ env.TARGET_REPO }}")

          echo "‚úÖ PR created successfully for $CURRENT_MOD_DIR: $PR_URL"
          echo "## üéâ Pull Request Created" >> $GITHUB_STEP_SUMMARY
          echo "**Mod Directory:** $CURRENT_MOD_DIR (Title: $CURRENT_MOD_TITLE)" >> $GITHUB_STEP_SUMMARY
          echo "**PR:** [$PR_TITLE]($PR_URL)" >> $GITHUB_STEP_SUMMARY
