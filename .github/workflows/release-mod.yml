name: Release Mod

on:
  workflow_dispatch:
    inputs:
      mod_name:
        description: "The name of the mod directory (e.g., black-seal)"
        required: true
        type: string
      version:
        description: "The version to release (e.g., 3.2.4)"
        required: true
        type: string
      tag_name:
        description: "The full git tag being released (e.g., black-seal__v3.2.4)"
        required: true
        type: string

jobs:
  build-and-zip:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up variables from inputs
        id: vars
        run: |
          MOD_NAME="${{ github.event.inputs.mod_name }}"
          VERSION="${{ github.event.inputs.version }}"
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          LATEST_TAG="${MOD_NAME}__latest"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "MOD_NAME=$MOD_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "ZIP_NAME=${MOD_NAME}__v${VERSION}.zip" >> $GITHUB_ENV
          echo "LATEST_ZIP_NAME=${MOD_NAME}.zip" >> $GITHUB_ENV

      - name: Check if mod folder exists
        run: |
          if [ ! -d "$MOD_NAME" ]; then
            echo "Error: Mod folder '$MOD_NAME' does not exist"
            exit 1
          fi

      - name: Create _common folder if it doesn't exist
        run: |
          if [ ! -d "_common" ]; then
            echo "Warning: _common folder does not exist, creating empty folder"
            mkdir -p _common
          fi

      - name: Create temporary directory structure
        run: |
          mkdir -p temp/$MOD_NAME/common
          cp -r $MOD_NAME/* temp/$MOD_NAME/
          if [ -d "_common" ] && [ "$(ls -A _common)" ]; then
            cp -r _common/* temp/$MOD_NAME/common/
          fi

      - name: Create release zips
        run: |
          cd temp
          # Create versioned zip
          zip -r "../$ZIP_NAME" "$MOD_NAME"
          # Create latest zip (same content, different name)
          zip -r "../$LATEST_ZIP_NAME" "$MOD_NAME"
          cd ..

      - name: Extract Changelog Entry for Release
        id: extract_changelog
        run: |
          MOD_CHANGELOG_FILE="${{ env.MOD_NAME }}/CHANGELOG.md"
          RELEASE_VERSION="${{ env.VERSION }}"
          CHANGELOG_BODY=""

          if [ -f "$MOD_CHANGELOG_FILE" ]; then
            echo "üìñ Found changelog file: $MOD_CHANGELOG_FILE"
            START_LINE=$(grep -n "^## \\[${RELEASE_VERSION}\\]" "$MOD_CHANGELOG_FILE" | cut -d: -f1)

            if [ -n "$START_LINE" ]; then
              END_LINE=$(tail -n +$((START_LINE + 1)) "$MOD_CHANGELOG_FILE" | grep -n "^## \\[" | head -1 | cut -d: -f1)
              if [ -n "$END_LINE" ]; then
                CHANGELOG_BODY=$(sed -n "$((START_LINE + 1)),$((START_LINE + END_LINE -1))p" "$MOD_CHANGELOG_FILE")
              else
                CHANGELOG_BODY=$(tail -n +$((START_LINE + 1)) "$MOD_CHANGELOG_FILE")
              fi
              echo "‚úÖ Extracted changelog entry for v${RELEASE_VERSION}"
            else
              echo "‚ö†Ô∏è Warning: No changelog entry found for version v${RELEASE_VERSION} in $MOD_CHANGELOG_FILE"
              CHANGELOG_BODY="No changelog entry found for v${RELEASE_VERSION}."
            fi
          else
            echo "‚ö†Ô∏è Warning: Changelog file not found at $MOD_CHANGELOG_FILE"
            CHANGELOG_BODY="No changelog file found."
          fi

          DELIMITER="$(openssl rand -hex 10)"
          echo "changelog_body<<$DELIMITER" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_BODY" >> $GITHUB_OUTPUT
          echo "$DELIMITER" >> $GITHUB_OUTPUT

      - name: Check for existing latest release
        id: check_latest
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/$LATEST_TAG"; then
            echo "latest_exists=true" >> $GITHUB_OUTPUT
            echo "Latest tag $LATEST_TAG exists, will update it"
          else
            echo "latest_exists=false" >> $GITHUB_OUTPUT
            echo "Latest tag $LATEST_TAG does not exist, will create it"
          fi

      - name: Delete existing latest release if it exists
        if: steps.check_latest.outputs.latest_exists == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete "$LATEST_TAG" --yes || true
          git tag -d "$LATEST_TAG" || true
          git push origin ":refs/tags/$LATEST_TAG" || true

      - name: Create versioned release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: ${{ env.ZIP_NAME }}
          name: ${{ env.MOD_NAME }} v${{ env.VERSION }}
          body: |
            **Changelog for v${{ env.VERSION }}:**
            ${{ steps.extract_changelog.outputs.changelog_body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create/Update latest release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.LATEST_TAG }}
          files: ${{ env.LATEST_ZIP_NAME }}
          name: ${{ env.MOD_NAME }} (Latest)
          body: |
            **Latest Version:** v${{ env.VERSION }}

            This release always contains the most recent version of ${{ env.MOD_NAME }}.

            ---
            **Changelog for v${{ env.VERSION }}:**
            ${{ steps.extract_changelog.outputs.changelog_body }}

            ---
            For version-specific releases, see: [${{ env.MOD_NAME }} v${{ env.VERSION }}](https://github.com/${{ github.repository }}/releases/tag/${{ env.TAG_NAME }})
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MOD_NAME }}-releases
          path: |
            ${{ env.ZIP_NAME }}
            ${{ env.LATEST_ZIP_NAME }}